import os
from typing import List, Optional
from utils import load_catalog_entry, save_catalog_entry
from utils import DISK_PATH

class Table:
    def __init__(self, table_name, new_table_args=None):
        """
        Initialize a Table object.
        Tables might be stored in multiple files, each file containing at most PAGES_PER_FILE pages.
        The file naming convention for multiple files of a table is: `<table_name>_1.bat`, `<table_name>_2.bat`, etc.
        :param table_name:
        :param new_table_args:
        """

        # constants
        self.PAGE_SLOTS = 8
        self.PAGES_PER_FILE = 256

        # Page Structure: [ page number | bitmap | record 0 | record 1 | ... | record 7 ]
        self.PAGE_HEADER_SIZE = 1 + 1 # 1 byte for page number, 1 byte for bitmap of 8 bits
        self.FILE_HEADER_SIZE = 32 # 256 bits for page bitmap, equal to 32 bytes

        self.table_name = table_name

        # first check if the table entry exists in the catalog
        self.catalog_entry = load_catalog_entry(table_name)

        if self.catalog_entry is None:
            if new_table_args is None:
                raise ValueError(f"Table '{table_name}' does not exist and no arguments provided to create it.")
            else:
                self._create_table(new_table_args)



    def _create_table(self, args: List[int, int, List[str]]):
        field_count, pk_idx, field_names = args

        catalog_key = self.table_name
        catalog_entry = {
            "file_count": 1,  # Initially one file, file names are generated by <table_name>_<file_index>.bat
            "field_count": field_count,
            "pk_idx": pk_idx,
            "field_names": field_names
        }
        save_catalog_entry(catalog_key, catalog_entry)

        file_path = os.path.join(DISK_PATH, f"{self.table_name}_1.bat")
        if os.path.exists(file_path):
            raise FileExistsError(f"No entry for table '{self.table_name}' exists in catalog, but file '{file_path}' already exists.")

        # write file header
        # file header contains a bitmap of 256 bits, each bit representing a page
        with open(file_path, 'wb') as f:
            f.write(bytearray(32))

        # TODO: log the new table creation to log.csv and catalog.json


    def encode_record(self):
        raise NotImplementedError()

    def decode_record(self):
        raise NotImplementedError()